// get_dalle_image.js

require('dotenv').config();

//openai
const { OpenAI } = require('openai');
const openai = new OpenAI({ apiKey: process.env.OPENAI_APIKEY });

//axios
const axios = require('axios');

async function generateImage(event, prompt) {
  try {
    const image = await openai.images.generate({ prompt: prompt, model: "dall-e-3", quality: `hd`, size: `1792x1024` });
    return image.data[0];
  }
  catch (error) { await handleError(event, error); return null; }
}

async function downloadImage(event, url) {
  try {
    const response = await axios.get(url, { responseType: 'arraybuffer' });
    return Buffer.from(response.data);
  }
  catch (error) { await handleError(event, error); return null; }
}

async function sendMessage(event, content) {
  try { const message = await event.reply(content); }
  catch (error) { await handleError(event, error); }
}

/*async function sendImage(event, content, imageBuffer, fileName) {
  try {
    const payload = { content, files: [{ attachment: imageBuffer, name: fileName }] };
    await event.reply(payload);
  }
  catch (error) { await handleError(event, error); }
}*/

//main logic
const get_dalle_image = async ({ prompt }) => {
  try {
    const startTime = Date.now();
    let image = await generateImage(event, prompt);
    let imageBuffer = await downloadImage(event, image.url);
    const endTime = (Date.now() - startTime) / 1000;
    const duration = `Generated Image (${duration} seconds):`;
    const revisedPrompt = `Optimized prompt: ${image.revised_prompt}`;
    const imageObject; //return to chatgpt?
  }
  catch (error) { await handleError(event, error); }
}

module.exports = { get_dalle_image };

/*
{
  "name": "get_dalle_image",
  "description": "Create an image based on my prompt",
  "parameters": {
    "type": "object",
    "properties": {
      "prompt": {
        "type": "string",
        "description": "The description of the image to be created by Dall-e"
      }
    },
    "required": [
      "prompt"
    ]
  }
}
*/